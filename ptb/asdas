int ptb_kosong(Mahasiswa* root) {
    return root == nullptr;
}

Mahasiswa* buatSimpul(string nama, int angkatan, string jurusan, double ipk) {
    Mahasiswa* mahasiswaBaru = new Mahasiswa;
    mahasiswaBaru->nama = nama;
    mahasiswaBaru->angkatan = angkatan;
    mahasiswaBaru->jurusan = jurusan;
    mahasiswaBaru->ipk = ipk;
    mahasiswaBaru->left = nullptr;
    mahasiswaBaru->right = nullptr;
    return mahasiswaBaru;
}

Mahasiswa* tambahMahasiswa(Mahasiswa* root, string nama, int angkatan, string jurusan, double ipk) {
    if (ptb_kosong(root)) {
        return buatSimpul(nama, angkatan, jurusan, ipk);
    }

    if (nama < root->nama) {
        root->left = tambahMahasiswa(root->left, nama, angkatan, jurusan, ipk);
    } else {
        root->right = tambahMahasiswa(root->right, nama, angkatan, jurusan, ipk);
    }
    return root;
}

void inorderCetak(Mahasiswa* root) {
    if (!ptb_kosong(root)) {
        inorderCetak(root->left);
        cout << "====================================" << endl;
        cout << "Nama: " << root->nama << endl;
        cout << "Angkatan: " << root->angkatan << endl;
        cout << "Jurusan: " << root->jurusan << endl;
        cout << "IPK: " << root->ipk << endl << endl;
        inorderCetak(root->right);
    }
}

void preorderCetak(Mahasiswa* root) {
    if (!ptb_kosong(root)) {
        cout << "====================================" << endl;
        cout << "Nama: " << root->nama << endl;
        cout << "Angkatan: " << root->angkatan << endl;
        cout << "Jurusan: " << root->jurusan << endl;
        cout << "IPK: " << root->ipk << endl << endl;
        preorderCetak(root->left);
        preorderCetak(root->right);
    }
}

void postorderCetak(Mahasiswa* root) {
    if (!ptb_kosong(root)) {
        postorderCetak(root->left);
        postorderCetak(root->right);
        cout << "====================================" << endl;
        cout << "Nama: " << root->nama << endl;
        cout << "Angkatan: " << root->angkatan << endl;
        cout << "Jurusan: " << root->jurusan << endl;
        cout << "IPK: " << root->ipk << endl << endl;
    }
}

Mahasiswa* cariNode(Mahasiswa* root, string nama) {
    Mahasiswa* current = root;

    while (current != nullptr) {
        if (nama == current->nama) {
            return current;
        } else if (nama < current->nama) {
            current = current->left;
        } else {
            current = current->right;
        }
    }

    cout << "Data tidak ditemukan." << endl;
    return nullptr;
}

void editData(Mahasiswa* root, string nama) {
    Mahasiswa* target = cariNode(root, nama);
    if (target != nullptr) {
        cin.ignore();
        cout << "Masukkan nama baru: ";
        getline(cin, target->nama);
        cout << "Masukkan angkatan baru: ";
        cin >> target->angkatan;
        cin.ignore();
        cout << "Masukkan jurusan baru: ";
        getline(cin, target->jurusan);
        cout << "Masukkan IPK baru: ";
        cin >> target->ipk;
    } else {
        cout << "Data tidak ditemukan!" << endl;
    }
}

Mahasiswa* hapusNode(Mahasiswa* root, string hapusNama) {
    if (root == nullptr) {
        cout << "Data kosong." << endl;
        return nullptr;
    }

    Mahasiswa* target = cariNode(root, hapusNama);

    if (target == nullptr) {
        return root;
    }

    Mahasiswa* parent = cariParent(root, target);

    // Case 1: Node yang dihapus adalah daun (tidak memiliki anak)
    if (target->left == nullptr && target->right == nullptr) {
        if (parent == nullptr) {
            // Node yang dihapus adalah root dan satu-satunya node di tree
            delete target;
            cout << "Data berhasil dihapus." << endl;
            return nullptr;
        } else if (target == parent->left) {
            // Node yang dihapus adalah left child dari parent
            parent->left = nullptr;
        } else {
            // Node yang dihapus adalah right child dari parent
            parent->right = nullptr;
        }
        delete target;
    }
    // Case 2: Node yang dihapus memiliki satu anak (kiri atau kanan)
    else if (target->left == nullptr || target->right == nullptr) {
        Mahasiswa* nonNullChild = (target->left != nullptr) ? target->left : target->right;
        if (parent == nullptr) {
            // Node yang dihapus adalah root dan memiliki satu anak
            delete target;
            cout << "Data berhasil dihapus." << endl;
            return nonNullChild;
        } else if (target == parent->left) {
            // Node yang dihapus adalah left child dari parent
            parent->left = nonNullChild;
        } else {
            // Node yang dihapus adalah right child dari parent
            parent->right = nonNullChild;
        }
        delete target;
    }
    // Case 3: Node yang dihapus memiliki dua anak
    else {
        Mahasiswa* successor = target->right;
        Mahasiswa* successorParent = nullptr;

        while (successor->left != nullptr) {
            successorParent = successor;
            successor = successor->left;
        }

        // Pindahkan data successor ke target
        target->nama = successor->nama;
        target->angkatan = successor->angkatan;
        target->jurusan = successor->jurusan;
        target->ipk = successor->ipk;

        // Hapus successor yang sebenarnya
        if (successorParent != nullptr) {
            successorParent->left = nullptr;
        } else {
            target->right = nullptr;
        }
        delete successor;
    }

    cout << "Data berhasil dihapus." << endl;
    return root;
}






Mahasiswa* cariParent(Mahasiswa* root, Mahasiswa* child) {
    if (root == nullptr || root == child) {
        return nullptr;
    }

    if ((root->left == child) || (root->right == child)) {
        return root;
    }

    // Cari pada subtree kiri dan kanan
    Mahasiswa* parent = cariParent(root->left, child);
    if (parent == nullptr) {
        parent = cariParent(root->right, child);
    }

    return parent;
}